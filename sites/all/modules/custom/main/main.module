<?php

function main_menu() {
    $items = array();
    $items['user/reg'] = array(
        'title' => 'Registration form',
        'page callback' => 'drupal_get_form',
        'access callback' => TRUE,
        'page arguments' => array('main_user_register_form')
    );
  /*  $items['user/login'] = array(
        'title' => 'Login form',
        'page callback' => 'drupal_get_form',
        'access callback' => TRUE,
        'page arguments' => array('main_user_login_form')
    );*/
    $items['social'] = array(
        'title' => 'Social aggregator',
        'page callback' => 'main_page_callback',
        //'access callback' => TRUE,
        'access arguments' => array('access content'),
        //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'file' => 'main.pages.inc'
    );

    return $items;
}

function main_page_callback() {
    $module_path = drupal_get_path('module', 'main');
    $content = array(
        '#markup' => '',
        '#attached' => array(
            //'libraries_load' => array(array('backbone')),
            'js' => array(
                array('data' => $module_path . '/js/jquery.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/underscore.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/backbone.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/backbone.marionette.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/jquery.cookie.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_config.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_second.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_viewer.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_routing.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_closer.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_start.js', 'type' => 'file', 'scope' => 'footer')
            ),
            'css' => array(
                array('data' => $module_path . '/css/style.css', 'type' => 'file'),
            ),
            //'css' => array(
                //array('data' => $module_path . '/css/style.css', 'type' => 'file', 'scope' => 'footer'),
                //array($module_path . '/css/style.css'),
                //$module_path . '/css/style.css'
            //),
        ),
    );
    //$content['#attached']['css'][] = $module_path . '/css/style.css';
    $content['#attached']['css']['.socialDetail {border:1px solid black;width:600px;height:auto} .post-detail {border: 1px solid black;}'] = array( 'type' => 'inline');
    $content['#markup'] = '
     <script type="text/template" id="notice-item"></script>
     <div id="menu">
         <a href="#main" class="js-menu-main">Main</a>
         <a href="#feeds" class="js-menu-feeds">Feeds</a>
         <a href="http://localhost/drupal_task_1/user/test" class="js-menu-exit">Exit</a>
     </div>
     <div id="content1"></div>
     <div id="modal"></div>
     <!--<script type="text/template" id="layout-template">
             <img src="" alt="Loading..." id="spinner" />-->
     <script type="text/template" id="layout-template">
         <div id="noticeContainer"></div>
         <div id="mainContainer"></div>
         <div id="modalContainer"></div>
     </script>
     <script type="text/template" id="auth-template">
         <div id="login-form">
            <label for="edit-name">Login <span title="This field is required." class="form-required">*</span></label>
            <input type="text" class="form-text required" maxlength="60" size="60" value="" name="name" id="login-username">
            <label for="edit-pass">Password <span title="This field is required." class="form-required">*</span></label>
            <input type="password" class="form-text required" maxlength="60" size="60" name="pass" id="login-password">
            <input type="submit" class="form-submit" value="Log in" id="login-submit">
         </div>
         <div id="reg-form"></div>
     </script>
     <script type="text/template" id="list-template">
         <thead>
             <tr>
                 <th>Social name</th>
                 <th>Status</th>
             </tr>
         </thead>
         <tbody></tbody>
     </script>
     <script type="text/template" id="item-template">
         <td><%=name%></td>
         <td></td>
     </script>
     <script type="text/template" id="close-template">
         <p>That\'s all, folks !</p>
     </script>
     <script type="text/template" id="social-item-template">
         <div class="post-detail">
             <div class="content"><%=content%></div>
             <div class="date_post"><%=date_post%></div>
         </div>
     </script>
     <script type="text/template" id="social-list-template">
         <a class="close" data-dismiss="modal" href="#">x</a>
         <div class="user_name"></div>
         <div class="panel-new-post">
             <textarea placeholder="Комментировать" class="text-new-post"></textarea>
             <button class="add-new-post">Отправить</button>
         </div>
     </script>
     ';
    return $content;
}

function main_settings_libraries_info() {
    $module_path = drupal_get_path('module', 'main');
    $libraries['underscore'] = array(
        'name' => 'underscore.js',
        'files' => array(
            'js' => array(
                //$module_path . '/js/underscore.js',
                'underscore.js',
            ),
        ),
    );
    $libraries['backbone'] = array(
        'name' => 'backbone.js',
        'files' => array(
            'js' => array(
                'backbone.js',
            ),
        ),
        'dependencies' => array(
            'underscore',
        ),
    );
    return $libraries;
}

function main_user_register_form($form, &$form_state) {
    $form['login'] = array(
        '#title' => 'Login',
        '#description' => '',
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['email'] = array(
        '#title' => 'Email',
        '#description' => '',
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 15,
        '#required' => TRUE,
    );
    $form['password'] = array(
        '#title' => 'Password',
        '#description' => '',
        '#type' => 'password',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['password_approve'] = array(
        '#title' => 'Approve password',
        '#description' => '',
        '#type' => 'password',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Sign up'),
    );
    return $form;
}

function main_user_register_form_validate($form, &$form_state) {
    if (!valid_email_address($form_state['values']['email'])) {
        form_set_error('email', t('Incorrect email format.'));
    }
    if ($form_state['values']['password'] != $form_state['values']['password_approve']) {
        form_set_error('password_approve', t('Passwords are not equal'));
        //form_set_error('password', t('Passwords don\'t. equal'));
    }
}

function main_user_register_form_submit($form, &$form_state){
    $newUser = array(
        'name' => $form_state['values']['login'],
        'pass' => $form_state['values']['password'],
        'mail' => $form_state['values']['email'],
        'init' => $form_state['values']['email'],
        'status' => 1,
        'access' => REQUEST_TIME,
        'created' => REQUEST_TIME
    );
    user_save(null, $newUser);
    drupal_set_message("Successful registration.");
}

function main_user_login_form($form, &$form_state) {
    $form['login'] = array(
        '#title' => 'Login',
        '#description' => '',
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['password'] = array(
        '#title' => 'Password',
        '#description' => '',
        '#type' => 'password',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Sign in'),
    );
    return $form;
}

function main_perm() {
    return array(
        'note resource create',
        'note resource view any note',
        'note resource view own notes',
        'note resource edit any note',
        'note resource edit own notes',
        'note resource delete any note',
        'note resource delete own notes',
    );
}

function main_get_note($id) {
    return (db_query("SELECT * FROM {note} WHERE id=:id", array(
        ':id' => $id,
    ))->fetchAssoc());
}

function main_write_note($note) {
    $primary_key = !empty($note->id) ? array('id') : NULL;
    drupal_write_record('note', $note, $primary_key);
}

function main_delete_note($id) {
    db_query("DELETE FROM {note} WHERE id=:id", array(
        ':id' => $id,
    ));
}

function main_services_resources() {
    return array(
        'note' => array(
            'retrieve' => array(
                'help' => 'Retrieves a note',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_retrieve',
                //'access callback' => '_main_access',
                //'access callback' => TRUE,
                //'access arguments' => array('administer site configuration'),
                //'access arguments' => array('view'),
                //'access arguments' => TRUE,
                //'access arguments append' => TRUE,
                'args' => array(
                    array(
                        'name' => 'id',
                        'type' => 'int',
                        'description' => 'The id of the note to get',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                ),
            ),
            'create' => array(
                'help' => 'Creates a note',
                'file' => array('file' => 'inc', 'module' => 'source'),
                'callback' => '_noteresource_create',
                'access arguments' => array('note resource create'),
                'access arguments append' => FALSE,
                'args' => array(
                    array(
                        'name' => 'data',
                        'type' => 'struct',
                        'description' => 'The note object',
                        'source' => 'data',
                        'optional' => FALSE,
                    ),
                ),
            ),
            'update' => array(
                'help' => 'Updates a note',
                'file' => array('file' => 'inc', 'module' => 'source'),
                'callback' => '_noteresource_update',
                'access callback' => '_noteresource_access',
                'access arguments' => array('update'),
                'access arguments append' => TRUE,
                'args' => array(
                    array(
                        'name' => 'id',
                        'type' => 'int',
                        'description' => 'The id of the node to update',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                    array(
                        'name' => 'data',
                        'type' => 'struct',
                        'description' => 'The note data object',
                        'source' => 'data',
                        'optional' => FALSE,
                    ),
                ),
            ),
            'delete' => array(
                'help' => 'Deletes a note',
                'file' => array('file' => 'inc', 'module' => 'source'),
                'callback' => '_noteresource_delete',
                'access callback' => '_noteresource_access',
                'access arguments' => array('delete'),
                'access arguments append' => TRUE,
                'args' => array(
                    array(
                        'name' => 'nid',
                        'type' => 'int',
                        'description' => 'The id of the note to delete',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                ),
            ),
            'index' => array(
                'help' => 'Retrieves a listing of notes',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_index',
                'access callback' => '_main_access',
                'access arguments' => array('access content'),
                'access arguments append' => FALSE,
                'args' => array(
                    array(
                        'name' => 'page',
                        'type' => 'int',
                        'description' => '',
                        'source' => array(
                            'param' => 'page',
                        ),
                        'optional' => TRUE,
                        'default value' => 0,
                    ),
                    array(
                        'name' => 'parameters',
                        'type' => 'array',
                        'description' => '',
                        'source' => 'param',
                        'optional' => TRUE,
                        'default value' => array(),
                    ),
                ),
            ),
        ),
        'social' => array(
            'index' => array(
                'help' => 'Retrieves a listing of socials',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_get_socials',
                'access arguments' => array('administer site configuration'),
               // 'access arguments append' => TRUE,
                //'args' => array()
                'args' => array(
                    array(
                        'name' => 'mode',
                        'type' => 'string',
                        'description' => '',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                ),
            ),
            'update' => array(
                'help' => 'Updates a social status',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_update',
                'access arguments' => array('administer site configuration'),
                //'access arguments' => TRUE,
                //'access arguments append' => TRUE,
                'args' => array(
                    array(
                        'name' => 'id',
                        'type' => 'int',
                        'description' => 'The id of the social to update',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    )
                )
            )
        ),
        'post' => array(
            'index' => array(
                'help' => 'Retrieves a listing of posts',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_get_posts',
                'access arguments' => array('administer site configuration'),
                'args' => array(
                    array(
                        'name' => 'mode',
                        'type' => 'string',
                        'description' => 'The mode',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                    array(
                        'name' => 'typeSocial',
                        'type' => 'string',
                        'description' => 'The name of the selected social',
                        'source' => array('path' => '1'),
                        'optional' => FALSE,
                    ),
                ),
            ),
            'create' => array(
                'help' => 'Creates new post',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_public_post',
                'access arguments' => array('administer site configuration'),
                //'access arguments append' => FALSE,
                'args' => array(
                    array(
                        'name' => 'data',
                        'type' => 'struct',
                        'description' => 'Post data',
                        'source' => 'data',
                        'optional' => FALSE,
                    ),
                ),
            )
        ),
        'auth' => array(
            'index' => array(
                'help' => 'Authorization user',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_auth_user',
                'access arguments' => array('access content'),
                'args' => array(
                    array(
                        'name' => 'mode',
                        'type' => 'string',
                        'description' => 'Mode',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                    array(
                         'name' => 'parameters',
                         'type' => 'array',
                         'description' => 'User parameters',
                         'source' => 'param',
                         'optional' => TRUE,
                         'default value' => array(),
                     )
                )
            )
        )
    );
}

function getSocials() {
    //var_dump(getTwitterAccount());die;
    $arr = [];
    $arr['twitter'] = getTwitterAccount();
    $arr['facebook'] = true;
    $arr['instagram'] = false;
    return $arr;
}

function main_save_social_data($arrayData) {
    global $user;
    if ($arrayData['social'] == 'twitter') {
        db_insert('twitter')
            ->fields(array('user_id', 'oauth_token', 'oauth_token_secret'))
            ->values(array(
                'user_id' => $user->uid,
                'oauth_token' => $arrayData['oauth_token'],
                'oauth_token_secret' => $arrayData['oauth_token_secret'],
            ))
            ->execute();
    } elseif ($arrayData['social'] == 'instagram') {
        db_insert('instagram')
            ->fields(array('user_id', 'access_token'))
            ->values(array(
                'user_id' => $user->uid,
                'access_token' => $arrayData['access_token']
            ))
            ->execute();
    } elseif ($arrayData['social'] == 'facebook') {
        db_insert('facebook')
            ->fields(array('user_id', 'access_token'))
            ->values(array(
                'user_id' => $user->uid,
                'access_token' => $arrayData['access_token']
            ))
            ->execute();
    }
}