<?php

function main_menu() {
    $items = array();
    $items['user/reg'] = array(
        'title' => 'Registration form',
        'page callback' => 'drupal_get_form',
        'access callback' => TRUE,
        'page arguments' => array('main_user_register_form')
    );
  /*  $items['user/login'] = array(
        'title' => 'Login form',
        'page callback' => 'drupal_get_form',
        'access callback' => TRUE,
        'page arguments' => array('main_user_login_form')
    );
    $items['user/1/social'] = array(
        'title' => 'Social aggregator',
        'page callback' => 'main_page_callback',
        //'access arguments' => array('access content'),
        'access callback' => TRUE,
        //'access arguments' => array('all'),
        //'access arguments' => array('administer site configuration'),
        'file' => 'main.pages.inc'
    );*/
    $items['social'] = array(
        'title' => 'Social aggregator',
        'page callback' => 'main_page_callback',
        'access callback' => TRUE,
        'file' => 'main.pages.inc'
    );
    return $items;
}

/*function main_permission() {
    return array(
        'all' => array(
            'title' => t('Access for all'),
            'description' => t(''),
        ),
    );
}*/

/*function main_preprocess_page(&$variables) {
    //var_dump($variables['user']->roles);die;
    //if(!$variables['user']->uid && arg(0)!='user' && arg(1)!='login') {
    if (arg(0) == 'user' && arg(1) == 'piy') {
        //var_dump($variables['user']);die;
        drupal_goto('user/piy');
    }
}*/

/*function main_preprocess_node(&$variables) {
    $node = $variables['node'];
    var_dump($node);die;
    switch ($node->type) {
        case 'profile':
            if (arg(0) == 'node' && arg(1) == $node->nid && arg(2) == "") {
                // If we are postitive we are on node/N where N is the NID of a profile
                // node, then redirect to the user profile page instead.
                drupal_goto("user/$node->uid");
            }
    }
}*/

function main_page_callback() {
    $module_path = drupal_get_path('module', 'main');
    $content = array(
        '#markup' => '',
        '#attached' => array(
            //'libraries_load' => array(array('backbone')),
            'js' => array(
                array('data' => $module_path . '/js/jquery.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/underscore.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/backbone.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/backbone.marionette.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/jquery.cookie.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_config.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_second.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_viewer.js', 'type' => 'file', 'scope' => 'footer'),
                array('data' => $module_path . '/js/app_routing.js', 'type' => 'file', 'scope' => 'footer'),
                /*array('data' => $module_path . '/js/app_closer.js', 'type' => 'file', 'scope' => 'footer'),*/
                array('data' => $module_path . '/js/app_start.js', 'type' => 'file', 'scope' => 'footer')
            ),
            'css' => array(
                array('data' => $module_path . '/css/style.css', 'type' => 'file'),
            ),
            //'css' => array(
                //array('data' => $module_path . '/css/style.css', 'type' => 'file', 'scope' => 'footer'),
                //array($module_path . '/css/style.css'),
                //$module_path . '/css/style.css'
            //),
        ),
    );
    //$content['#attached']['css'][] = $module_path . '/css/style.css';
    $content['#attached']['css']['
    #block-user-login {display: none;}
    #mainContainer table tr:nth-child(even) {background: #f3f4ee}
    #mainContainer table tr:nth-child(odd) {background: #fff}
    #mainContainer .post-detail {border: 1px solid black;}
    #mainContainer .social-detail {width:100%; border:1px solid black; height:auto}
    #mainContainer .social-detail div:nth-child(even) {background: #f3f4ee}
    #mainContainer .social-detail div:nth-child(odd) {background: #fff}
    #mainContainer .panel-new-post {float:right; margin-top:10px; width:40%; margin-right:15px;}
    #mainContainer .posts-wrapper {float:left; width:55%;}
    #mainContainer #login-form {float:left; margin-left:600px;}
    #mainContainer #reg-form {float:right; width:50%;}
    #noticeContainer {color:white; text-align:center;}
    #noticeContainer .notice-error {background:red;}
    #noticeContainer .notice-success {background:green;}
    #noticeContainer .notice-warning {background:orange;}
    '] = array( 'type' => 'inline');
    $regForm = drupal_get_form('main_user_register_form');
    $regForm = drupal_render($regForm);
    $content['#markup'] = '
     <script type="text/template" id="notice-item"></script>
     <div id="menu"></div>
     <div id="content-wrapper"></div>
     <!--<script type="text/template" id="layout-template">
             <img src="" alt="Loading..." id="spinner" />-->
     <script type="text/template" id="layout-template">
         <div id="noticeContainer"></div>
         <div id="mainContainer"></div>
     </script>
     <script type="text/template" id="auth-template">
         <div id="login-form">
            <form>
                <div class="form-item form-type-textfield form-item-login">
                    <label for="edit-name">Login <span title="This field is required." class="form-required">*</span></label>
                    <input type="text" class="form-text required" maxlength="15" size="30" value="" name="name" id="login-username">
                </div>
                <div class="form-item form-type-textfield form-item-login">
                    <label for="edit-pass">Password <span title="This field is required." class="form-required">*</span></label>
                    <input type="password" class="form-text required" maxlength="15" size="30" name="pass" id="login-password">
                </div>
                <p><input type="submit" class="form-submit" value="Log in" id="login-submit"></p>
            </form>
         </div>
         <div id="reg-form">' . $regForm . '</div>
     </script>
     <script type="text/template" id="list-template">
         <thead>
             <tr>
                 <th>Social name</th>
                 <th>Status</th>
             </tr>
         </thead>
         <tbody></tbody>
     </script>
     <script type="text/template" id="item-template">
         <td><%=name%></td>
         <td></td>
     </script>
     <script type="text/template" id="social-item-template">
         <div class="post-detail">
             <div class="content"><%=content%></div>
             <div class="date_post"><%=date_post%></div>
         </div>
     </script>
     <script type="text/template" id="social-list-template">
         <a class="close" href="#">x</a>
         <div class="user-name"></div>
         <div class="panel-new-post">
             <textarea placeholder="Text" class="text-new-post form-textarea" cols="100" rows="10"></textarea>
             <p><input class="add-new-post form-submit" value="Post"></input></p>
         </div>
         <div class="posts-wrapper"></div>
     </script>
     ';
    return $content;
}

function main_settings_libraries_info() {
    $module_path = drupal_get_path('module', 'main');
    $libraries['underscore'] = array(
        'name' => 'underscore.js',
        'files' => array(
            'js' => array(
                //$module_path . '/js/underscore.js',
                'underscore.js',
            ),
        ),
    );
    $libraries['backbone'] = array(
        'name' => 'backbone.js',
        'files' => array(
            'js' => array(
                'backbone.js',
            ),
        ),
        'dependencies' => array(
            'underscore',
        ),
    );
    return $libraries;
}

function main_user_register_form($form, &$form_state) {
    $form['login'] = array(
        '#title' => 'Username',
        '#description' => '',
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
        '#id' => 'reg-name'
    );
    $form['email'] = array(
        '#title' => 'Email',
        '#description' => '',
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 15,
        '#required' => TRUE,
        '#id' => 'reg-email'
    );
    $form['password'] = array(
        '#title' => 'Password',
        '#description' => '',
        '#type' => 'password',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
        '#id' => 'reg-pass'
    );
    $form['password_approve'] = array(
        '#title' => 'Approve password',
        '#description' => '',
        '#type' => 'password',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
        '#id' => 'reg-approve-pass'
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#id' => 'reg-submit',
        '#value' => t('Sign up'),
    );
    return $form;
}

function main_user_register_form_validate($form, &$form_state) {
    if (!valid_email_address($form_state['values']['email'])) {
        form_set_error('email', t('Incorrect email format.'));
    }
    if ($form_state['values']['password'] != $form_state['values']['password_approve']) {
        form_set_error('password_approve', t('Passwords are not equal'));
        //form_set_error('password', t('Passwords don\'t. equal'));
    }
}

function main_user_register_form_submit($form, &$form_state){
    $newUser = array(
        'name' => $form_state['values']['login'],
        'pass' => $form_state['values']['password'],
        'mail' => $form_state['values']['email'],
        'init' => $form_state['values']['email'],
        'status' => 1,
        'access' => REQUEST_TIME,
        'created' => REQUEST_TIME
    );
    user_save(null, $newUser);
    drupal_set_message("Successful registration.");
}

function main_user_login_form($form, &$form_state) {
    $form['login'] = array(
        '#title' => 'Login',
        '#description' => '',
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['password'] = array(
        '#title' => 'Password',
        '#description' => '',
        '#type' => 'password',
        '#size' => 30,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Sign in'),
    );
    return $form;
}

/*function main_perm() {
    return array(
        'note resource create',
        'note resource view any note',
        'note resource view own notes',
        'note resource edit any note',
        'note resource edit own notes',
        'note resource delete any note',
        'note resource delete own notes',
    );
}*/

function main_get_note($id) {
    return (db_query("SELECT * FROM {note} WHERE id=:id", array(
        ':id' => $id,
    ))->fetchAssoc());
}

function main_write_note($note) {
    $primary_key = !empty($note->id) ? array('id') : NULL;
    drupal_write_record('note', $note, $primary_key);
}

function main_delete_note($id) {
    db_query("DELETE FROM {note} WHERE id=:id", array(
        ':id' => $id,
    ));
}

function main_services_resources() {
    return array(
        'social' => array(
            'index' => array(
                'help' => 'Retrieves a listing of socials',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_get_socials',
                'access arguments' => array('access content'),
                'args' => array(
                    array(
                        'name' => 'mode',
                        'type' => 'string',
                        'description' => '',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                ),
            ),
            'update' => array(
                'help' => 'Updates a social status',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_update',
                'access arguments' => array('access content'),
                'args' => array(
                    array(
                        'name' => 'id',
                        'type' => 'int',
                        'description' => 'The id of the social to update',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    )
                )
            )
        ),
        'post' => array(
            'index' => array(
                'help' => 'Retrieves a listing of posts',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_get_posts',
                'access arguments' => array('access content'),
                'args' => array(
                    array(
                        'name' => 'mode',
                        'type' => 'string',
                        'description' => 'The mode',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                    array(
                        'name' => 'typeSocial',
                        'type' => 'string',
                        'description' => 'The name of the selected social',
                        'source' => array('path' => '1'),
                        'optional' => FALSE,
                    ),
                ),
            ),
            'create' => array(
                'help' => 'Creates new post',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_public_post',
                'access arguments' => array('access content'),
                'args' => array(
                    array(
                        'name' => 'data',
                        'type' => 'struct',
                        'description' => 'Post data',
                        'source' => 'data',
                        'optional' => FALSE,
                    ),
                ),
            )
        ),
        'auth' => array(
            'index' => array(
                'help' => 'Authorization user',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_auth_user',
                'access arguments' => array('access content'),
                'args' => array(
                    array(
                        'name' => 'mode',
                        'type' => 'string',
                        'description' => 'Mode',
                        'source' => array('path' => '0'),
                        'optional' => FALSE,
                    ),
                    array(
                         'name' => 'parameters',
                         'type' => 'array',
                         'description' => 'User parameters',
                         'source' => 'param',
                         'optional' => TRUE,
                         'default value' => array(),
                     )
                )
            ),
            'create' => array(
                'help' => 'Creates new user',
                'file' => array('file' => 'inc', 'module' => 'main'),
                'callback' => '_main_auth_create_user',
                'access arguments' => array('access content'),
                'args' => array(
                    array(
                        'name' => 'data',
                        'type' => 'struct',
                        'description' => 'User data',
                        'source' => 'data',
                        'optional' => FALSE,
                    ),
                ),
            )
        )
    );
}

function getSocials() {
    //var_dump(getTwitterAccount());die;
    $arr = [];
    $arr['twitter'] = getTwitterAccount();
    $arr['facebook'] = true;
    $arr['instagram'] = false;
    return $arr;
}

function main_save_social_data($arrayData) {
    global $user;
    if ($arrayData['social'] == 'twitter') {
        db_insert('twitter')
            ->fields(array('user_id', 'oauth_token', 'oauth_token_secret'))
            ->values(array(
                'user_id' => $user->uid,
                'oauth_token' => $arrayData['oauth_token'],
                'oauth_token_secret' => $arrayData['oauth_token_secret'],
            ))
            ->execute();
    } elseif ($arrayData['social'] == 'instagram') {
        db_insert('instagram')
            ->fields(array('user_id', 'access_token'))
            ->values(array(
                'user_id' => $user->uid,
                'access_token' => $arrayData['access_token']
            ))
            ->execute();
    } elseif ($arrayData['social'] == 'facebook') {
        db_insert('facebook')
            ->fields(array('user_id', 'access_token'))
            ->values(array(
                'user_id' => $user->uid,
                'access_token' => $arrayData['access_token']
            ))
            ->execute();
    }
}